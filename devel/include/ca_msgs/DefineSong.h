// Generated by gencpp from file ca_msgs/DefineSong.msg
// DO NOT EDIT!


#ifndef CA_MSGS_MESSAGE_DEFINESONG_H
#define CA_MSGS_MESSAGE_DEFINESONG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ca_msgs
{
template <class ContainerAllocator>
struct DefineSong_
{
  typedef DefineSong_<ContainerAllocator> Type;

  DefineSong_()
    : song(0)
    , length(0)
    , notes()
    , durations()  {
    }
  DefineSong_(const ContainerAllocator& _alloc)
    : song(0)
    , length(0)
    , notes(_alloc)
    , durations(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _song_type;
  _song_type song;

   typedef uint8_t _length_type;
  _length_type length;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _notes_type;
  _notes_type notes;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _durations_type;
  _durations_type durations;





  typedef boost::shared_ptr< ::ca_msgs::DefineSong_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ca_msgs::DefineSong_<ContainerAllocator> const> ConstPtr;

}; // struct DefineSong_

typedef ::ca_msgs::DefineSong_<std::allocator<void> > DefineSong;

typedef boost::shared_ptr< ::ca_msgs::DefineSong > DefineSongPtr;
typedef boost::shared_ptr< ::ca_msgs::DefineSong const> DefineSongConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ca_msgs::DefineSong_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ca_msgs::DefineSong_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ca_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ca_msgs': ['/home/nvidia/catkin_ws_/src/create_autonomy/ca_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ca_msgs::DefineSong_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ca_msgs::DefineSong_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ca_msgs::DefineSong_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ca_msgs::DefineSong_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ca_msgs::DefineSong_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ca_msgs::DefineSong_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ca_msgs::DefineSong_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae0ef1f2fad74bf546a9e5f037c27a5d";
  }

  static const char* value(const ::ca_msgs::DefineSong_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae0ef1f2fad74bf5ULL;
  static const uint64_t static_value2 = 0x46a9e5f037c27a5dULL;
};

template<class ContainerAllocator>
struct DataType< ::ca_msgs::DefineSong_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca_msgs/DefineSong";
  }

  static const char* value(const ::ca_msgs::DefineSong_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ca_msgs::DefineSong_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 song            # song number [0-3]\n\
uint8 length          # song length [1-16]\n\
uint8[] notes         # notes defined by the MIDI note numbering scheme. Notes outside the range of [31-127] are rest notes.\n\
float32[] durations   # durations in seconds. Maximum duration is 255/64.\n\
";
  }

  static const char* value(const ::ca_msgs::DefineSong_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ca_msgs::DefineSong_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.song);
      stream.next(m.length);
      stream.next(m.notes);
      stream.next(m.durations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DefineSong_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ca_msgs::DefineSong_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ca_msgs::DefineSong_<ContainerAllocator>& v)
  {
    s << indent << "song: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.song);
    s << indent << "length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.length);
    s << indent << "notes[]" << std::endl;
    for (size_t i = 0; i < v.notes.size(); ++i)
    {
      s << indent << "  notes[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.notes[i]);
    }
    s << indent << "durations[]" << std::endl;
    for (size_t i = 0; i < v.durations.size(); ++i)
    {
      s << indent << "  durations[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.durations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CA_MSGS_MESSAGE_DEFINESONG_H
